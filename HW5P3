from sklearn import svm
import numpy as np
from PCA import class_error_rate,mnist, center_matrix_SVD
from scipy.stats import mode
import pickle

def main():
    digits = mnist()
    x = center_matrix_SVD(digits.train_Images)
    labels = np.zeros((digits.test_Images.shape[0],10))
    for i in range(10):
        myonevsall = onevsall()
        myonevsall.fit(digits,x.PCA[:,:50],2**(i-4))
        labels[:,i] = myonevsall.predict(digits,(digits.test_Images - x.centers)@np.transpose(x.V[:50,:]))[:,0]
        print(class_error_rate(labels[:,i],digits.test_Labels)[0])
    pickle.dump(labels,open('Prob3_labels.p','wb'))

class onevsall:
    def fit(self,digits,x,C):
        self.mysvms = {}
        labsuniq = np.unique(digits.train_Labels)
        for i in range(labsuniq.size):
            # Returns labels of 0 for i and 1 for the rest
            labels = digits.train_Labels != labsuniq[i]
            self.mysvms[str(labsuniq[i]) + "vs Rest"] = self.twoatatime(labels,x,C)

    def twoatatime(self,labels,x,C):
        # Create a mask for our index variable
        # Get the index number for digits
        mysvm = svm.SVC(C=C,kernel='poly',degree=3)
        mysvm.fit(x,labels)
        return mysvm

    def predict(self,digits,test):
        labsuniq = np.unique(digits.train_Labels)
        count = 0
        labels = np.zeros((test.shape[0],10))
        for i in range(labsuniq.size):
            # Only returns the log probs for the false thing from fit
            labels[:,count] = self.mysvms[str(labsuniq[i]) + "vs Rest"].predict(test)[:,0]
            count += 1
        return mode(labels,axis=1)[0]

main()
