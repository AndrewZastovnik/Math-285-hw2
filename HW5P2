from sklearn import svm
import numpy as np
from PCA import class_error_rate,mnist, center_matrix_SVD
from scipy.stats import mode
import pickle

def main():
    digits = mnist()
    x = center_matrix_SVD(digits.train_Images)
    labels = np.zeros((digits.test_Images.shape[0],10))
    for i in range(10):
        myonevsone = onevsone()
        myonevsone.fit(digits,x.PCA[:,:50],2**(i-4))
        labels[:,i] = myonevsone.predict(digits,(digits.test_Images - x.centers)@np.transpose(x.V[:50,:]))[:,0]
        print(class_error_rate(labels[:,i],digits.test_Labels)[0])
    pickle.dump(labels,open('Prob2_labels.p','wb'))

class onevsone:
    # A Class to do one vs one logistic regression
    def fit(self,digits,train,C):
        # Create a dictionary to store our logistic functions
        self.mysvms = {}
        labsuniq = np.unique(digits.train_Labels)
        for i in range(labsuniq.size): #  Loops through the unique labels
            for j in range(i,labsuniq.size): #  Loops through the unique labels starting on the one i is on
                if i != j: # Don't fit a model to the same digits
                    self.mysvms[str(labsuniq[i]) + "vs" + str(labsuniq[j])] = self.twoatatime(digits,train,i,j,C)

    def twoatatime(self,digits,train,i,j,C):
        # Create a mask for our index variable
        mask = np.logical_or(digits.train_Labels == i, digits.train_Labels == j)
        # Get the index number for digits
        index = np.arange(digits.train_Labels.size)[mask]
        mysvm = svm.SVC(C=C,kernel='poly',degree=3)
        mysvm.fit(train[index,:],digits.train_Labels[index])
        return mysvm

    def predict(self,digits,test):
        labsuniq = np.unique(digits.train_Labels)
        count = 0
        self.labels = np.zeros((test.shape[0],45))
        for i in range(labsuniq.size):
            for j in range(i,labsuniq.size):
                if i != j:
                    self.labels[:,count] = self.mysvms[str(labsuniq[i]) + "vs" + str(labsuniq[j])].predict(test)
                    count += 1
        return mode(self.labels,axis=1)[0]

if __name__ == '__main__':
    main()
